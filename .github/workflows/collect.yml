name: Collect cultural data

on:
  schedule:
    - cron: '0 4 * * *'   # 06:00 Europe/Madrid aprox
  workflow_dispatch:
    inputs:
      log_level:
        description: "LOG_LEVEL for collector (DEBUG/INFO/WARNING)"
        required: false
        default: "INFO"
        type: choice
        options: [DEBUG, INFO, WARNING, ERROR]

permissions:
  contents: write

concurrency:
  group: collect-catalog
  cancel-in-progress: false

jobs:
  collect:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      # ✅ Nuevo: asegura árbol limpio antes de rebase/pull
      - name: Ensure clean working tree (stash or reset)
        run: |
          # Si hay cambios en ficheros versionados (p.ej., un run.log antiguo), los guardamos temporalmente
          if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "Working tree not clean. Stashing..."
            git stash push -u -m "pre-pull stash" || true
          fi

      - name: Pull (rebase) latest main BEFORE running collector
        run: |
          git fetch origin main
          git checkout main
          git pull --rebase origin main

      # 🧪 Opcional: snapshot HTML/headers de Actividades (Picasso) para depurar parsers
      - name: Snapshot Picasso actividades (debug)
        run: |
          mkdir -p data/sources
          URL="https://www.museopicassomalaga.org/actividades"
          TS=$(date -u +%Y%m%dT%H%M%SZ)
          STATUS=$(curl -s -o /tmp/picasso_acts.html -D /tmp/picasso_acts.headers -w "%{http_code}" "$URL" || true)

          # Guardamos el HTML crudo (útil para ver cambios de estructura)
          cp /tmp/picasso_acts.html "data/sources/picasso_actividades.html" || true

          # Generamos un JSON sencillo con metadatos
          {
            echo "{"
            echo "  \"fetched_at\": \"${TS}\","
            echo "  \"url\": \"${URL}\","
            echo "  \"status_code\": ${STATUS},"
            echo "  \"encoding\": \"utf-8\""
            echo "}"
          } > "data/sources/picasso_actividades.json"

      - name: Run collector
        env:
          LOG_LEVEL: ${{ inputs.log_level && inputs.log_level || 'INFO' }}
        run: |
          mkdir -p data
          echo "Run started: $(date -u +%Y-%m-%dT%H:%M:%SZ)" > data/run.log
          python -m scrapers.collector >> data/run.log 2>&1 || true
          echo "Run finished: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> data/run.log
          echo "" >> data/run.log
          echo "=== DATA DIR LISTING ===" >> data/run.log
          ls -lah data >> data/run.log

      - name: Upload run.log artifact
        uses: actions/upload-artifact@v4
        with:
          name: run-log
          path: data/run.log
          retention-days: 7

      # ⬇️ Ajustado: forzamos también data/sources/*
            - name: Commit changes (if any)
        run: |
          # Asegura que el directorio existe (por si el scraper aún no crea sources)
          mkdir -p data/sources

          # Stage de los archivos de datos (nunca añadimos run.log)
          git add -f data/catalog.jsonl data/curated.json data/manual_events.csv || true

          # Si no hay .json en sources, que no falle:
          git add -f data/sources/*.json 2>/dev/null || true

          # ¿Hay algo staged?
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          ts=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          git commit -m "chore(data): update cultural catalog ${ts}"
